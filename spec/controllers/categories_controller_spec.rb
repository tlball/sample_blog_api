require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CategoriesController do

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "family" } }

  describe "GET index" do
    it "assigns all categories as @categories" do
      category = Category.create! valid_attributes
      get :index, {}
      assigns(:categories).should eq([category])
    end

    it "returns all categories as a JSON object" do
      category1 = Category.create! valid_attributes
      category2 = Category.create! valid_attributes.merge(name: 'friends')
      get :index, {}

      categories = JSON.parse(response.body)
      expect(categories.size).to eq(2)
      expect(categories[0]['id']).to eq(category1.id)
      expect(categories[1]['id']).to eq(category2.id)
      expect(categories[0]['name']).to eq(category1.name)
      expect(categories[1]['name']).to eq(category2.name)
    end
  end

  describe "GET show" do
    it "assigns the requested category as @category" do
      category = Category.create! valid_attributes
      get :show, {:id => category.to_param}
      assigns(:category).should eq(category)
    end

    it "should return the category as JSON" do
      category = Category.create! valid_attributes
      get :show, {id: category.to_param}

      obj = JSON.parse(response.body)
      expect(obj['id']).to eq(category.id)
      expect(obj['name']).to eq(category.name)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Category" do
        expect {
          post :create, {:category => valid_attributes}
        }.to change(Category, :count).by(1)
      end

      it "assigns a newly created category as @category" do
        post :create, {:category => valid_attributes}
        assigns(:category).should be_a(Category)
        assigns(:category).should be_persisted
      end

      it "renders the created category as JSON" do
        post :create, {category: valid_attributes}
        obj = JSON.parse(response.body)
        expect(obj['id']).to eq(Category.last.id)
        expect(obj['name']).to eq(Category.last.name)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        # Trigger the behavior that occurs when invalid params are submitted
        Category.any_instance.stub(:save).and_return(false)
        post :create, {:category => { "name" => "invalid value" }}
        assigns(:category).should be_a_new(Category)
      end

      it "returns unprocessable_entity code" do
        # Trigger the behavior that occurs when invalid params are submitted
        Category.any_instance.stub(:save).and_return(false)
        post :create, {:category => { "name" => "invalid value" }}
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested category" do
        category = Category.create! valid_attributes
        # Assuming there are no other categories in the database, this
        # specifies that the Category created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Category.any_instance.should_receive(:update).with({ "name" => "MyString" })
        put :update, {:id => category.to_param, :category => { "name" => "MyString" }}
      end

      it "assigns the requested category as @category" do
        category = Category.create! valid_attributes
        put :update, {:id => category.to_param, :category => valid_attributes}
        assigns(:category).should eq(category)
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        category = Category.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Category.any_instance.stub(:save).and_return(false)
        put :update, {:id => category.to_param, :category => { "name" => "invalid value" }}
        assigns(:category).should eq(category)
      end

      it "returns unprocessable_entity code" do
        category = Category.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Category.any_instance.stub(:save).and_return(false)
        put :update, {:id => category.to_param, :category => { "name" => "invalid value" }}
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      category = Category.create! valid_attributes
      expect {
        delete :destroy, {:id => category.to_param}
      }.to change(Category, :count).by(-1)
    end

    it "returns no content" do
      category = Category.create! valid_attributes
      delete :destroy, {:id => category.to_param}
      expect(response.status).to eq(204)
    end
  end

end
