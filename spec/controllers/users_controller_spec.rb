require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {first_name: 'Fred', last_name: 'Flintstone', email: 'fred-flintstone@bedrock.com'} }


  describe "GET index" do
    it "assigns all users as @users" do
      user = User.create! valid_attributes
      get :index, {}
      assigns(:users).should eq([user])
    end

    it "returns all users as a JSON object" do
      user1 = User.create! valid_attributes
      user2 = User.create! valid_attributes.merge(first_name: 'Wilma')
      get :index, {}

      users = JSON.parse(response.body)
      expect(users.size).to eq(2)
      expect(users[0]['id']).to eq(user1.id)
      expect(users[1]['id']).to eq(user2.id)
      expect(users[0]['first_name']).to eq(user1.first_name)
      expect(users[1]['first_name']).to eq(user2.first_name)
      expect(users[0]['last_name']).to eq(user1.last_name)
      expect(users[1]['last_name']).to eq(user2.last_name)
      expect(users[0]['email']).to eq(user1.email)
      expect(users[1]['email']).to eq(user2.email)
    end
  end

  describe "GET show" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :show, {:id => user.to_param}
      assigns(:user).should eq(user)
    end

    it "should return the user as JSON" do
      user = User.create! valid_attributes
      get :show, {id: user.to_param}

      obj = JSON.parse(response.body)
      expect(obj['id']).to eq(user.id)
      expect(obj['first_name']).to eq(user.first_name)
      expect(obj['last_name']).to eq(user.last_name)
      expect(obj['email']).to eq(user.email)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "renders the created user as JSON" do
        post :create, {:user => valid_attributes}
        obj = JSON.parse(response.body)
        expect(obj['id']).to eq(User.last.id)
        expect(obj['first_name']).to eq(User.last.first_name)
        expect(obj['last_name']).to eq(User.last.last_name)
        expect(obj['email']).to eq(User.last.email)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => { "first_name" => "invalid value" }}
        assigns(:user).should be_a_new(User)
      end

      it "returns unprocessable_entity code" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => { "first_name" => "invalid value" }}
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        user = User.create! valid_attributes
        # Assuming there are no other users in the database, this
        # specifies that the User created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        User.any_instance.should_receive(:update).with({ "first_name" => "MyString" })
        put :update, {:id => user.to_param, :user => { "first_name" => "MyString" }}
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}
        assigns(:user).should eq(user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => { "first_name" => "invalid value" }}
        assigns(:user).should eq(user)
      end

      it "returns unprocessable_entity code" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => { "first_name" => "invalid value" }}
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}
      }.to change(User, :count).by(-1)
    end

    it "returns no content" do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}
      expect(response.status).to eq(204)
    end
  end

end
